# -*- coding: utf-8 -*-
"""EMA crossover practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mRd1kpMKTvEhMkeg-cBVP_HdtUJWNxSR
"""

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

start_date = "2023-01-01"
end_date = "2024-01-01"
symbol = "btc-usd"
df = yf.download(symbol, start_date, end_date, interval="1h")
ema_fast = 12
ema_slow = 26
ema = 21
count = 0
position_type = "na"
status = "not in trade"

# tp, sl
tp = 0.05  # 5%
sl = 0.05  # 5%

# Tax rate
tax_rate = 0.3

# Stats
long_trades = 0
short_trades = 0
num_trades_hit_long_tp = 0
num_trades_hit_short_tp = 0
long_sl_hit = 0
short_sl_hit = 0
long_exit_without_tp_sl = 0
short_exit_without_tp_sl = 0
portfolio = 0
leverage = 1
portfolio_value = 100
p_array = []
p_array_after_tax = []  # Add a new list to store portfolio values after tax
trades_data = {
    "Date": [],
    "Position": [],
    "Entry Price": [],
    "Exit Price": [],
    "Take Profit": [],
    "Stop Loss": [],
    "Portfolio Value": [],
    "Portfolio Value After Tax": [],  # Add a new column for portfolio value after tax
    "reason": []
}

df['EMA21'] = df['Close'].ewm(span=ema, adjust=False).mean()
df['EMA12'] = df['Close'].ewm(span=ema_fast, adjust=False).mean()
df['EMA26'] = df['Close'].ewm(span=ema_slow, adjust=False).mean()

for i in range(2, len(df)):
    if status == "not in trade":
        # condition for the long trades
        if (
            df['Close'][i] >= df['EMA21'][i] and
            df['Close'][i - 1] > df['EMA21'][i - 1] and
            df['Close'][i - 2] > df['EMA21'][i - 2] and
            df['Low'][i] <= df['EMA21'][i - 1]
        ):
            position_type = "Long trade"
            entry_price = df['EMA21'][i - 1]
            long_tp = entry_price + (entry_price * tp)
            long_sl = entry_price - (entry_price * sl)
            long_trades += 1
            status = "in trade"
            trades_data["Date"].append(df.index[i])
            trades_data["Position"].append(position_type)
            trades_data["Entry Price"].append(entry_price)
            trades_data["Exit Price"].append(None)
            trades_data["Take Profit"].append(long_tp)
            trades_data["Stop Loss"].append(long_sl)
            trades_data["reason"].append(None)
            trades_data["Portfolio Value"].append(None)
            trades_data["Portfolio Value After Tax"].append(None)

        # condition for the short trades (EMA Crossover strategy)
        elif df['EMA12'][i] < df['EMA26'][i] and df['EMA12'][i - 1] > df['EMA26'][i - 1]:
            position_type = "Short trade"
            entry_price = df['Close'][i]
            short_tp = entry_price - (entry_price * tp)
            short_sl = entry_price + (entry_price * sl)
            short_trades += 1
            status = "in trade"
            trades_data["Date"].append(df.index[i])
            trades_data["Position"].append(position_type)
            trades_data["Entry Price"].append(entry_price)
            trades_data["Exit Price"].append(None)
            trades_data["Take Profit"].append(short_tp)
            trades_data["Stop Loss"].append(short_sl)
            trades_data["reason"].append(None)
            trades_data["Portfolio Value"].append(None)
            trades_data["Portfolio Value After Tax"].append(None)

    elif status == "in trade":
        # long tp
        if position_type == "Long trade":
            if long_tp >= df["High"][i]:
                status = "not in trade"
                num_trades_hit_long_tp += 1
                profit = (portfolio_value * tp) * leverage
                portfolio += profit
                portfolio_after_tax = portfolio * (1 - tax_rate)  # Calculate portfolio value after tax
                p_array.append(portfolio)
                p_array_after_tax.append(portfolio_after_tax)  # Append portfolio value after tax
                trades_data["Exit Price"][-1] = long_tp
                trades_data["reason"][-1] = "long_tp_hit"
                trades_data["Portfolio Value"][-1] = portfolio
                trades_data["Portfolio Value After Tax"][-1] = portfolio_after_tax  # Add portfolio value after tax

            # long sl
            elif long_sl >= df["Low"][i]:
                status = "not in trade"
                long_sl_hit += 1
                portfolio -= (portfolio_value * sl) * leverage
                p_array.append(portfolio)
                p_array_after_tax.append(portfolio * (1 - tax_rate))  # Append portfolio value after tax
                trades_data["Exit Price"][-1] = long_sl
                trades_data["reason"][-1] = "long_sl_hit"
                trades_data["Portfolio Value"][-1] = portfolio
                trades_data["Portfolio Value After Tax"][-1] = portfolio * (1 - tax_rate)  # Add portfolio value after tax

            # exit without tp and sl
            elif df['EMA21'][i - 1] > df["High"][i]:
                status = "not in trade"
                long_exit_without_tp_sl += 1
                loss = ((df["Close"][i] - entry_price) / entry_price)
                portfolio -= (portfolio_value * loss * leverage)
                p_array.append(portfolio)
                p_array_after_tax.append(portfolio * (1 - tax_rate))  # Append portfolio value after tax
                trades_data["Exit Price"][-1] = df["Close"][i]
                trades_data["reason"][-1] = "third_condition"
                trades_data["Portfolio Value"][-1] = portfolio
                trades_data["Portfolio Value After Tax"][-1] = portfolio * (1 - tax_rate)  # Add portfolio value after tax

        # short tp
        elif position_type == "Short trade":
            if short_tp <= df["Low"][i]:
                status = "not in trade"
                num_trades_hit_short_tp += 1
                profit = (portfolio_value * tp) * leverage
                portfolio += profit
                portfolio_after_tax = portfolio * (1 - tax_rate)  # Calculate portfolio value after tax
                p_array.append(portfolio)
                p_array_after_tax.append(portfolio_after_tax)  # Append portfolio value after tax
                trades_data["Exit Price"][-1] = short_tp
                trades_data["reason"][-1] = "short_tp_hit"
                trades_data["Portfolio Value"][-1] = portfolio
                trades_data["Portfolio Value After Tax"][-1] = portfolio_after_tax  # Add portfolio value after tax

            # short sl
            elif short_sl <= df["High"][i]:
                status = "not in trade"
                short_sl_hit += 1
                portfolio -= (portfolio_value * sl) * leverage
                p_array.append(portfolio)
                p_array_after_tax.append(portfolio * (1 - tax_rate))  # Append portfolio value after tax
                trades_data["Exit Price"][-1] = short_sl
                trades_data["reason"][-1] = "short_sl_hit"
                trades_data["Portfolio Value"][-1] = portfolio
                trades_data["Portfolio Value After Tax"][-1] = portfolio * (1 - tax_rate)  # Add portfolio value after tax

            # exit without tp and sl
            elif df['EMA12'][i] > df['EMA26'][i] and df['EMA12'][i - 1] < df['EMA26'][i - 1]:
                status = "not in trade"
                short_exit_without_tp_sl += 1
                loss = ((entry_price - df["Close"][i]) / entry_price)
                portfolio -= (portfolio_value * loss * leverage)
                p_array.append(portfolio)
                p_array_after_tax.append(portfolio * (1 - tax_rate))  # Append portfolio value after tax
                trades_data["Exit Price"][-1] = df["Close"][i]
                trades_data["reason"][-1] = "third_condition"
                trades_data["Portfolio Value"][-1] = portfolio
                trades_data["Portfolio Value After Tax"][-1] = portfolio * (1 - tax_rate)  # Add portfolio value after tax

print("num of long trades executed", long_trades)
print("num long trades exited by hitting tp", num_trades_hit_long_tp)
print("long sl hit", long_sl_hit)
print("exit without tp and sl (long)", long_exit_without_tp_sl)
print("num of short trades executed", short_trades)
print("num short trades exited by hitting tp", num_trades_hit_short_tp)
print("short sl hit", short_sl_hit)
print("exit without tp and sl (short)", short_exit_without_tp_sl)
print("portfolio", portfolio)
print("pnL ratio before tax:", ((num_trades_hit_long_tp + num_trades_hit_short_tp) / (long_trades + short_trades)) * 100)

# Calculate PnL ratio after tax
portfolio_after_tax = portfolio * (1 - tax_rate)
num_trades_hit_tp_after_tax = sum(p > portfolio_value for p in p_array_after_tax)
pnl_ratio_after_tax = (num_trades_hit_tp_after_tax / (long_trades + short_trades)) * 100
print("pnL ratio after tax:", pnl_ratio_after_tax)

trades_df = pd.DataFrame(trades_data)
trades_df.tail(60)